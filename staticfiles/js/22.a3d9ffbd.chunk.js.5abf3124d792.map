{"version":3,"sources":["views/charts/apex/AreaCharts.js","views/charts/apex/AreaCharts1.js","views/charts/apex/Report.js","views/charts/apex/ApexCharts.js","views/ui-elements/data-list/Percent.js","views/charts/apex/ApexAreaCharts.js","views/charts/apex/lightweight.js"],"names":["AreaCharts","modifydata","data","flag","date","wealth","x","push","filingdate","Math","round","transactionvalue","options","chart","id","xaxis","type","categories","this","props","tickAmount","stroke","curve","dataLabels","enabled","colors","themeColors","grid","row","opacity","legend","offsetY","tooltip","format","series","name","Card","CardHeader","CardTitle","title","CardBody","height","React","Component","AreaCharts1","calendardate","value","columns","selector","render","text","grow","sortable","inst_columns","net_inst_columns","ApexCharts","state","alignLabels","timeScale","rightOffset","barSpacing","fixLeftEdge","lockVisibleTimeRangeOnResize","rightBarStaysOnScroll","borderVisible","borderColor","visible","timeVisible","secondsVisible","articles","docs","buy_value","sell_value","top10_buys","top10_sells","net_inst_by_date","top10_inst","net_inst_value","wealth_graph","isPostLoading","loading","getShares","net_inst_by_date_shr","i","length","securitytype","renameKey","obj","oldKey","newKey","fetchArticles","articleID","match","params","axios","get","then","res","arr","JSON","stringify","split","join","updatedJson","parse","console","log","setState","areaSeries","toggleModal","prevState","token","Fragment","style","display","justifyContent","alignItems","Spinner","color","size","className","Row","Col","lg","sm","ticker_name","price","darkTheme","autoWidth","gutter","strokeColor","success","percent","company_health","span","rev_growth","rev_uncertainty","profit_margin","market_share_growth","company_yield","dividend_yield","earnings_yield","payout_ratio","free_cash_flow","company_quality","debt_to_equity","return_on_invested_capital","roe_growth","roe_uncertainty","fair_value_score","fair_value_ddm","fair_value_fcf","industry","industry_rank","profitability_rank","value_rank","quality_rank","risk_score","vol","max_drawdown","correl","net_value_executed_pct","scroll","noHeader","net_holding_pct","to","connect","auth","GoalOverview","sparkline","dropShadow","blur","left","top","plotOptions","radialBar","startAngle","endAngle","hollow","track","background","strokeWidth","show","fontSize","fill","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","lineCap","ApexAreaCharts","second","portfolio_wealth","performance","addSeriesFunctions","candlestick","line","area","bar","histogram","layout","backgroundColor","lineColor","textColor","vertLines","horzLines","lightTheme","ChartWrapper","resizeHandler","width","chartDiv","current","parentNode","clientWidth","autoHeight","clientHeight","resize","removeSeries","forEach","serie","addSeries","func","handleLinearInterpolation","linearInterpolation","setData","markers","setMarkers","priceLines","createPriceLine","addLegend","handleSeries","candlestickSeries","lineSeries","barSeries","histogramSeries","unsubscribeEvents","prevProps","unsubscribeClick","onClick","unsubscribeCrosshairMove","onCrosshairMove","unsubscribeVisibleTimeRangeChange","onTimeRangeMove","handleEvents","subscribeClick","subscribeCrosshairMove","subscribeVisibleTimeRangeChange","handleLegends","handleTimeRange","from","setVisibleRange","candleTime","first","time","last","newData","Array","floor","index","prevTime","prevValue","interTime","interValue","filter","handleUpdateChart","window","removeEventListener","mergeDeep","applyOptions","legendDiv","innerHTML","legends","handleMainLegend","addEventListener","param","div","seriesPrices","undefined","open","close","high","low","document","createElement","innerText","priceElem","appendChild","createRef","createChart","equal","ref","position","zIndex","padding","isObject","item","isArray","target","source","output","Object","assign","keys","key"],"mappings":"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","file":"static/js/22.a3d9ffbd.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\nimport Chart from \"react-apexcharts\"\r\n\r\nclass AreaCharts extends React.Component {\r\n    modifydata = (data, flag) => {\r\n        let date = [], wealth = [];\r\n        for (let x in data) {\r\n            date.push(data[x].filingdate);\r\n            wealth.push(Math.round(data[x].transactionvalue * 100) / 100);\r\n        }\r\n        if (!flag) return date;\r\n        else return wealth;\r\n    }\r\n  render() {\r\n    const options = {\r\n        chart: {\r\n          id: \"areaChart\"\r\n        },\r\n        xaxis: {\r\n          type: \"date\",\r\n          categories: this.modifydata(this.props.data, 0),\r\n          tickAmount: 8\r\n        },\r\n        stroke: {\r\n          curve: \"smooth\"\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        colors: this.props.themeColors,\r\n        grid: {\r\n          row: {\r\n            colors: [\"#f3f3f3\", \"transparent\"],\r\n            opacity: 0.5\r\n          }\r\n        },\r\n        legend: {\r\n          offsetY: -10\r\n        },\r\n        tooltip: {\r\n          x: {\r\n            format: \"dd/MM/yy\"\r\n          }\r\n        }\r\n      };\r\n      const series = [\r\n        {\r\n          name: \"series1\",\r\n          data: this.modifydata(this.props.data, 1)\r\n        }\r\n      ];\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{this.props.title}</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Chart\r\n            options={options}\r\n            series={series}\r\n            type=\"area\"\r\n            height={400}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default AreaCharts\r\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\nimport Chart from \"react-apexcharts\"\r\n\r\nclass AreaCharts1 extends React.Component {\r\n    modifydata = (data, flag) => {\r\n        let date = [], wealth = [];\r\n        for (let x in data) {\r\n            date.push(data[x].calendardate);\r\n            wealth.push(Math.round(data[x].value * 100) / 100);\r\n        }\r\n        if (!flag) return date;\r\n        else return wealth;\r\n    }\r\n  render() {\r\n    const options = {\r\n        chart: {\r\n          id: \"areaChart\"\r\n        },\r\n        xaxis: {\r\n          type: \"date\",\r\n          categories: this.modifydata(this.props.data, 0),\r\n          tickAmount: 8\r\n        },\r\n        stroke: {\r\n          curve: \"smooth\"\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        colors: this.props.themeColors,\r\n        grid: {\r\n          row: {\r\n            colors: [\"#f3f3f3\", \"transparent\"],\r\n            opacity: 0.5\r\n          }\r\n        },\r\n        legend: {\r\n          offsetY: -10\r\n        },\r\n        tooltip: {\r\n          x: {\r\n            format: \"dd/MM/yy\"\r\n          }\r\n        }\r\n      };\r\n      const series = [\r\n        {\r\n          name: \"series1\",\r\n          data: this.modifydata(this.props.data, 1)\r\n        }\r\n      ];\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{this.props.title}</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Chart\r\n            options={options}\r\n            series={series}\r\n            type=\"area\"\r\n            height={400}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default AreaCharts1\r\n","import React from 'react';\r\nimport { Table, Divider, Statistic, Progress } from 'antd';\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  Container,\r\n  Col,\r\n  Row,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Spinner,\r\n\r\n} from \"reactstrap\"\r\nimport { List } from \"antd\";\r\nimport * as Icon from 'react-feather';\r\nimport axios from \"axios\";\r\nimport GoalOverview from \"../../ui-elements/data-list/Percent\"\r\nimport ApexAreaCharts from \"./ApexAreaCharts\"\r\nimport AreaCharts from \"./AreaCharts\"\r\nimport AreaCharts1 from \"./AreaCharts1\"\r\nimport DataTable from \"react-data-table-component\"\r\nconst isoCountries = {\r\n  'AF' : 'Afghanistan',\r\n  'AX' : 'Aland Islands',\r\n  'AL' : 'Albania',\r\n  'DZ' : 'Algeria',\r\n  'AS' : 'American Samoa',\r\n  'AD' : 'Andorra',\r\n  'AO' : 'Angola',\r\n  'AI' : 'Anguilla',\r\n  'AQ' : 'Antarctica',\r\n  'AG' : 'Antigua And Barbuda',\r\n  'AR' : 'Argentina',\r\n  'AM' : 'Armenia',\r\n  'AW' : 'Aruba',\r\n  'AU' : 'Australia',\r\n  'AT' : 'Austria',\r\n  'AZ' : 'Azerbaijan',\r\n  'BS' : 'Bahamas',\r\n  'BH' : 'Bahrain',\r\n  'BD' : 'Bangladesh',\r\n  'BB' : 'Barbados',\r\n  'BY' : 'Belarus',\r\n  'BE' : 'Belgium',\r\n  'BZ' : 'Belize',\r\n  'BJ' : 'Benin',\r\n  'BM' : 'Bermuda',\r\n  'BT' : 'Bhutan',\r\n  'BO' : 'Bolivia',\r\n  'BA' : 'Bosnia And Herzegovina',\r\n  'BW' : 'Botswana',\r\n  'BV' : 'Bouvet Island',\r\n  'BR' : 'Brazil',\r\n  'IO' : 'British Indian Ocean Territory',\r\n  'BN' : 'Brunei Darussalam',\r\n  'BG' : 'Bulgaria',\r\n  'BF' : 'Burkina Faso',\r\n  'BI' : 'Burundi',\r\n  'KH' : 'Cambodia',\r\n  'CM' : 'Cameroon',\r\n  'CA' : 'Canada',\r\n  'CV' : 'Cape Verde',\r\n  'KY' : 'Cayman Islands',\r\n  'CF' : 'Central African Republic',\r\n  'TD' : 'Chad',\r\n  'CL' : 'Chile',\r\n  'CN' : 'China',\r\n  'CX' : 'Christmas Island',\r\n  'CC' : 'Cocos (Keeling) Islands',\r\n  'CO' : 'Colombia',\r\n  'KM' : 'Comoros',\r\n  'CG' : 'Congo',\r\n  'CD' : 'Congo, Democratic Republic',\r\n  'CK' : 'Cook Islands',\r\n  'CR' : 'Costa Rica',\r\n  'CI' : 'Cote D\\'Ivoire',\r\n  'HR' : 'Croatia',\r\n  'CU' : 'Cuba',\r\n  'CY' : 'Cyprus',\r\n  'CZ' : 'Czech Republic',\r\n  'DK' : 'Denmark',\r\n  'DJ' : 'Djibouti',\r\n  'DM' : 'Dominica',\r\n  'DO' : 'Dominican Republic',\r\n  'EC' : 'Ecuador',\r\n  'EG' : 'Egypt',\r\n  'SV' : 'El Salvador',\r\n  'GQ' : 'Equatorial Guinea',\r\n  'ER' : 'Eritrea',\r\n  'EE' : 'Estonia',\r\n  'ET' : 'Ethiopia',\r\n  'FK' : 'Falkland Islands (Malvinas)',\r\n  'FO' : 'Faroe Islands',\r\n  'FJ' : 'Fiji',\r\n  'FI' : 'Finland',\r\n  'FR' : 'France',\r\n  'GF' : 'French Guiana',\r\n  'PF' : 'French Polynesia',\r\n  'TF' : 'French Southern Territories',\r\n  'GA' : 'Gabon',\r\n  'GM' : 'Gambia',\r\n  'GE' : 'Georgia',\r\n  'DE' : 'Germany',\r\n  'GH' : 'Ghana',\r\n  'GI' : 'Gibraltar',\r\n  'GR' : 'Greece',\r\n  'GL' : 'Greenland',\r\n  'GD' : 'Grenada',\r\n  'GP' : 'Guadeloupe',\r\n  'GU' : 'Guam',\r\n  'GT' : 'Guatemala',\r\n  'GG' : 'Guernsey',\r\n  'GN' : 'Guinea',\r\n  'GW' : 'Guinea-Bissau',\r\n  'GY' : 'Guyana',\r\n  'HT' : 'Haiti',\r\n  'HM' : 'Heard Island & Mcdonald Islands',\r\n  'VA' : 'Holy See (Vatican City State)',\r\n  'HN' : 'Honduras',\r\n  'HK' : 'Hong Kong',\r\n  'HU' : 'Hungary',\r\n  'IS' : 'Iceland',\r\n  'IN' : 'India',\r\n  'ID' : 'Indonesia',\r\n  'IR' : 'Iran, Islamic Republic Of',\r\n  'IQ' : 'Iraq',\r\n  'IE' : 'Ireland',\r\n  'IM' : 'Isle Of Man',\r\n  'IL' : 'Israel',\r\n  'IT' : 'Italy',\r\n  'JM' : 'Jamaica',\r\n  'JP' : 'Japan',\r\n  'JE' : 'Jersey',\r\n  'JO' : 'Jordan',\r\n  'KZ' : 'Kazakhstan',\r\n  'KE' : 'Kenya',\r\n  'KI' : 'Kiribati',\r\n  'KR' : 'Korea',\r\n  'KW' : 'Kuwait',\r\n  'KG' : 'Kyrgyzstan',\r\n  'LA' : 'Lao People\\'s Democratic Republic',\r\n  'LV' : 'Latvia',\r\n  'LB' : 'Lebanon',\r\n  'LS' : 'Lesotho',\r\n  'LR' : 'Liberia',\r\n  'LY' : 'Libyan Arab Jamahiriya',\r\n  'LI' : 'Liechtenstein',\r\n  'LT' : 'Lithuania',\r\n  'LU' : 'Luxembourg',\r\n  'MO' : 'Macao',\r\n  'MK' : 'Macedonia',\r\n  'MG' : 'Madagascar',\r\n  'MW' : 'Malawi',\r\n  'MY' : 'Malaysia',\r\n  'MV' : 'Maldives',\r\n  'ML' : 'Mali',\r\n  'MT' : 'Malta',\r\n  'MH' : 'Marshall Islands',\r\n  'MQ' : 'Martinique',\r\n  'MR' : 'Mauritania',\r\n  'MU' : 'Mauritius',\r\n  'YT' : 'Mayotte',\r\n  'MX' : 'Mexico',\r\n  'FM' : 'Micronesia, Federated States Of',\r\n  'MD' : 'Moldova',\r\n  'MC' : 'Monaco',\r\n  'MN' : 'Mongolia',\r\n  'ME' : 'Montenegro',\r\n  'MS' : 'Montserrat',\r\n  'MA' : 'Morocco',\r\n  'MZ' : 'Mozambique',\r\n  'MM' : 'Myanmar',\r\n  'NA' : 'Namibia',\r\n  'NR' : 'Nauru',\r\n  'NP' : 'Nepal',\r\n  'NL' : 'Netherlands',\r\n  'AN' : 'Netherlands Antilles',\r\n  'NC' : 'New Caledonia',\r\n  'NZ' : 'New Zealand',\r\n  'NI' : 'Nicaragua',\r\n  'NE' : 'Niger',\r\n  'NG' : 'Nigeria',\r\n  'NU' : 'Niue',\r\n  'NF' : 'Norfolk Island',\r\n  'MP' : 'Northern Mariana Islands',\r\n  'NO' : 'Norway',\r\n  'OM' : 'Oman',\r\n  'PK' : 'Pakistan',\r\n  'PW' : 'Palau',\r\n  'PS' : 'Palestinian Territory, Occupied',\r\n  'PA' : 'Panama',\r\n  'PG' : 'Papua New Guinea',\r\n  'PY' : 'Paraguay',\r\n  'PE' : 'Peru',\r\n  'PH' : 'Philippines',\r\n  'PN' : 'Pitcairn',\r\n  'PL' : 'Poland',\r\n  'PT' : 'Portugal',\r\n  'PR' : 'Puerto Rico',\r\n  'QA' : 'Qatar',\r\n  'RE' : 'Reunion',\r\n  'RO' : 'Romania',\r\n  'RU' : 'Russian Federation',\r\n  'RW' : 'Rwanda',\r\n  'BL' : 'Saint Barthelemy',\r\n  'SH' : 'Saint Helena',\r\n  'KN' : 'Saint Kitts And Nevis',\r\n  'LC' : 'Saint Lucia',\r\n  'MF' : 'Saint Martin',\r\n  'PM' : 'Saint Pierre And Miquelon',\r\n  'VC' : 'Saint Vincent And Grenadines',\r\n  'WS' : 'Samoa',\r\n  'SM' : 'San Marino',\r\n  'ST' : 'Sao Tome And Principe',\r\n  'SA' : 'Saudi Arabia',\r\n  'SN' : 'Senegal',\r\n  'RS' : 'Serbia',\r\n  'SC' : 'Seychelles',\r\n  'SL' : 'Sierra Leone',\r\n  'SG' : 'Singapore',\r\n  'SK' : 'Slovakia',\r\n  'SI' : 'Slovenia',\r\n  'SB' : 'Solomon Islands',\r\n  'SO' : 'Somalia',\r\n  'ZA' : 'South Africa',\r\n  'GS' : 'South Georgia And Sandwich Isl.',\r\n  'ES' : 'Spain',\r\n  'LK' : 'Sri Lanka',\r\n  'SD' : 'Sudan',\r\n  'SR' : 'Suriname',\r\n  'SJ' : 'Svalbard And Jan Mayen',\r\n  'SZ' : 'Swaziland',\r\n  'SE' : 'Sweden',\r\n  'CH' : 'Switzerland',\r\n  'SY' : 'Syrian Arab Republic',\r\n  'TW' : 'Taiwan',\r\n  'TJ' : 'Tajikistan',\r\n  'TZ' : 'Tanzania',\r\n  'TH' : 'Thailand',\r\n  'TL' : 'Timor-Leste',\r\n  'TG' : 'Togo',\r\n  'TK' : 'Tokelau',\r\n  'TO' : 'Tonga',\r\n  'TT' : 'Trinidad And Tobago',\r\n  'TN' : 'Tunisia',\r\n  'TR' : 'Turkey',\r\n  'TM' : 'Turkmenistan',\r\n  'TC' : 'Turks And Caicos Islands',\r\n  'TV' : 'Tuvalu',\r\n  'UG' : 'Uganda',\r\n  'UA' : 'Ukraine',\r\n  'AE' : 'United Arab Emirates',\r\n  'GB' : 'United Kingdom',\r\n  'US' : 'United States',\r\n  'UM' : 'United States Outlying Islands',\r\n  'UY' : 'Uruguay',\r\n  'UZ' : 'Uzbekistan',\r\n  'VU' : 'Vanuatu',\r\n  'VE' : 'Venezuela',\r\n  'VN' : 'Viet Nam',\r\n  'VG' : 'Virgin Islands, British',\r\n  'VI' : 'Virgin Islands, U.S.',\r\n  'WF' : 'Wallis And Futuna',\r\n  'EH' : 'Western Sahara',\r\n  'YE' : 'Yemen',\r\n  'ZM' : 'Zambia',\r\n  'ZW' : 'Zimbabwe'\r\n};\r\n\r\nconst getCountryName = (countryCode) => {\r\n  if (isoCountries.hasOwnProperty(countryCode)) {\r\n      return isoCountries[countryCode];\r\n  } else {\r\n      return countryCode;\r\n  }\r\n}\r\nconst columns = [\r\n  {\r\n    name: 'Filing Date',\r\n    selector: 'filingdate',\r\n    render: (text) => <a>{text}</a>,\r\n    grow:3\r\n  },\r\n  {\r\n    name: 'Officer Title',\r\n    selector: 'officertitle',\r\n    grow:5\r\n\r\n  },\r\n  {\r\n    name: 'Security Title',\r\n    selector: 'securitytitle',\r\n    grow:5\r\n\r\n  },\r\n  {\r\n    name: 'Exercise Price',\r\n    selector: 'priceexercisable',\r\n\r\n  },\r\n  {\r\n    name: 'Expiration Date',\r\n    selector: 'expirationdate',\r\n\r\n  },\r\n\r\n  {\r\n    name: 'Transaction Price ',\r\n    selector: 'transactionpricepershare',\r\n    sortable: true\r\n  },\r\n  {\r\n    name: 'Transaction Value ($ Mn)',\r\n    selector: 'transactionvalue',\r\n    sortable: true\r\n  }\r\n];\r\n\r\nconst inst_columns= [\r\n  {\r\n    name: 'Calendar Date',\r\n    selector: 'calendardate',\r\n    render: (text) => <a>{text}</a>,\r\n    grow:3\r\n  },\r\n  {\r\n    name: 'Investor Name',\r\n    selector: 'investorname',\r\n    grow:5\r\n\r\n  },\r\n  {\r\n    name: 'Security Type',\r\n    selector: 'securitytype',\r\n    grow:3\r\n\r\n  },\r\n  {\r\n    name: 'Price ',\r\n    selector: 'price',\r\n    sortable: true\r\n  },\r\n    {\r\n      name: 'Net Value ($ Mn)',\r\n      selector: 'value',\r\n      sortable: true\r\n    }\r\n  ]\r\n\r\n  const net_inst_columns =[\r\n    {\r\n      name: 'Calendar Date',\r\n      selector: 'calendardate',\r\n      render: (text) => <a>{text}</a>,\r\n    },\r\n    {\r\n      name: 'Security Type',\r\n      selector: 'securitytype',\r\n      grow:3\r\n\r\n    },\r\n      {\r\n        name: 'Net Value ($ Mn)',\r\n        selector: 'value',\r\n        sortable: true\r\n      }\r\n    ]\r\n/*\r\n\r\n  const sell_config = {\r\n    data: props.sell_value,\r\n    height: 400,\r\n    xField: 'filingdate',\r\n    yField: 'transactionvalue',\r\n    point: {\r\n    size: 3,\r\n    shape: 'circle',\r\n    },\r\n  };\r\n  <Card title=\"Insider Buy\">\r\n    <Area  data: props.buy_value\r\n    height: 400\r\n    xField: 'filingdate'\r\n    yField: 'transactionvalue'\r\n    point: {\r\n    size: 3,\r\n    shape: 'circle',\r\n    } />\r\n    </Card>\r\n    <Divider></Divider>\r\n    <Card title=\"Insider Sell\">\r\n    <Area  {...sell_config} />\r\n    </Card>\r\n  */\r\nlet $primary = \"#7367F0\",\r\n  $success = \"#28C76F\",\r\n  $danger = \"#EA5455\",\r\n  $warning = \"#FF9F43\",\r\n  $info = \"#00cfe8\",\r\n  $label_color_light = \"#dae1e7\"\r\n\r\nlet themeColors = [$primary, $success, $danger, $warning, $info]\r\nclass Report extends React.Component {\r\n  state = {\r\n    docs: [],\r\n  }\r\n  fetchPosts = (props) => {\r\n    let today = new Date();\r\n    today.setDate(today.getDate() - 200);\r\n    today = today.toISOString().slice(0, 10);\r\n    axios.get(`http://api.datanews.io/v1/news?source=wsj.com&size=100&apiKey=08qu938b4y5v8dem2w521v76v&q=${encodeURI(props.data.ticker_name)}&from=${today}&sortBy=date&language=en&country=US`)\r\n    .then(res => {\r\n      let sorted = res.data['hits']\r\n      this.setState({...this.state, docs: sorted });\r\n      console.log(this.state.docs)\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.fetchPosts(newProps);\r\n    \r\n  }\r\n  render() {\r\n    console.log(this.props.data);\r\n    return (\r\n\r\n      <div className=\"site-card-wrapper\">\r\n        \r\n        <Row>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  {this.props.data.ticker_name}\r\n                </CardTitle>\r\n              </CardHeader><hr />\r\n              <CardBody>\r\n                <Statistic value={this.props.data.price} />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <ApexAreaCharts themeColors={themeColors} data={this.props.wealth_graph} second=\"1\" title=\"Wealth Graph\" />\r\n        <Divider></Divider>\r\n        <Row gutter={16}>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Health\" percent={this.props.data.company_health} />\r\n                <Divider />\r\n                <Row gutter={20}>\r\n                  <Col span={12}>\r\n                    <p>5 Yr Revenue Growth (%)</p>\r\n                    <Statistic value={this.props.data.rev_growth} />\r\n                  </Col>\r\n\r\n                  <Col span={12}>\r\n                    <p>Revenue Growth Uncertainty (%)</p>\r\n                    <Statistic value={this.props.data.rev_uncertainty} />\r\n                  </Col>\r\n                  <Divider />\r\n                  <Col span={12}>\r\n                    <p>5 Yr Average Profit Margin (%)</p>\r\n                    <Statistic value={this.props.data.profit_margin} />\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <p>5 Yr Average Market Share Growth (%)</p>\r\n                    <Statistic value={this.props.data.market_share_growth} />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card><CardBody>\r\n            <GoalOverview  strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Yield\" percent={this.props.data.company_yield} />\r\n              <Divider />\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Dividend Yield (%)</p>\r\n                  <Statistic value={this.props.data.dividend_yield} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Earnings Yield (%)</p>\r\n                  <Statistic value={this.props.data.earnings_yield} />\r\n                </Col>\r\n                <Divider />\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Payout Ratio (%)</p>\r\n                  <Statistic value={this.props.data.payout_ratio} />\r\n                </Col>\r\n                <Col span={12}>\r\n                  <p>5 Yr Average Free Cash Flow ($bn)</p>\r\n                  <Statistic value={this.props.data.free_cash_flow} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody></Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card><CardBody>\r\n            <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Quality\" percent={this.props.data.company_quality} />\r\n            <Divider />\r\n            <Row gutter={20}>\r\n              <Col span={12}>\r\n                <p>5 Yr Average Debt/Equity (%)</p>\r\n                <Statistic value={this.props.data.debt_to_equity} />\r\n              </Col>\r\n\r\n              <Col span={12}>\r\n                <p>5 Yr Average Return on Invested Capital (%)</p>\r\n                <Statistic  value={this.props.data.return_on_invested_capital} />\r\n              </Col>\r\n              <Divider />\r\n              <Col span={12}>\r\n                <p>5 Yr Average Growth in ROE (%)</p>\r\n                <Statistic  value={this.props.data.roe_growth} />\r\n              </Col>\r\n              <Col span={12}>\r\n                <p>ROE Growth Uncertainty (%)</p>\r\n                <Statistic value={this.props.data.roe_uncertainty} />\r\n              </Col>\r\n            </Row>\r\n            </CardBody></Card>\r\n          </Col>\r\n        </Row>\r\n        <Divider></Divider>\r\n        <Row gutter={16}>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  Fair Value\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <p>Fair Value Rating ( / 20)</p>\r\n              <Statistic value={this.props.data.fair_value_score} />\r\n              <Divider></Divider>\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>Fair Value by Dividend Discount Model ($)</p>\r\n                  <Statistic value={this.props.data.fair_value_ddm} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                  <p>Fair Value by Dividend Discount Model ($)</p>\r\n                  <Statistic value={this.props.data.fair_value_fcf} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  Industry Rank\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <Statistic value={this.props.data.industry_rank} />\r\n              <Divider />\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>Profitability Rank</p>\r\n                  <Statistic  value={this.props.data.profitability_rank} />\r\n                </Col>\r\n\r\n                <Col span={12}>\r\n                  <p>Value Rank</p>\r\n                  <Statistic value={this.props.data.value_rank} />\r\n                </Col>\r\n                <Divider />\r\n                <Col span={24}>\r\n                  <p>Quality Rank</p>\r\n                  <Statistic value={this.props.data.quality_rank} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"4\" sm=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Market Risk</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <p>Risk Rating ( / 30)</p>\r\n              <Statistic value={this.props.data.risk_score} />\r\n              <Divider />\r\n              <Row gutter={20}>\r\n                <Col span={12}>\r\n                  <p>Annualized Volatility (%)</p>\r\n                  <Statistic value={this.props.data.vol} />\r\n                </Col>\r\n                <Col span={12}>\r\n                  <p>Max Drawdown (%)</p>\r\n                  <Statistic value={this.props.data.max_drawdown} />\r\n                </Col>\r\n                <Divider />\r\n                <Col span={24}>\r\n                  <p>Correlation with Market</p>\r\n                  <Statistic value={this.props.data.correl} />\r\n                </Col>\r\n              </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Divider />\r\n          <Col sm=\"5\" lg=\"3\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Insider Rating</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" percent={this.props.data.net_value_executed_pct} />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Divider></Divider>\r\n          <Col sm=\"12\" lg=\"5\">\r\n            <AreaCharts themeColors={themeColors} data={this.props.buy_value} columns={'calendardate','value'} title=\"Insider Buy\" />\r\n          </Col>\r\n\r\n          <Col sm=\"12\" lg=\"7\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  Top 10 Insider Trades Buy\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <DataTable data={this.props.top10_buys}\r\n                columns={columns} scroll={{ x: 1500 }} noHeader\r\n              /></CardBody>\r\n              </Card>\r\n          </Col>\r\n\r\n          <Divider />\r\n          <Col sm=\"12\" lg=\"5\">\r\n            <AreaCharts themeColors={themeColors} data={this.props.sell_value} title=\"Insider Sell\" />\r\n          </Col>\r\n\r\n          <Col sm=\"12\" lg=\"7\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Top 10 Insider Trades Sell</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <DataTable data={this.props.top10_sells}\r\n                columns={columns} scroll={{ x: 1500 }} noHeader\r\n              />\r\n              </CardBody>\r\n              </Card>\r\n          </Col>\r\n          <Divider></Divider>\r\n            <Col sm=\"5\" lg=\"3\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Institutional Rating</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" percent={this.props.data.net_holding_pct} />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n\r\n      <Divider />\r\n      <Col sm=\"12\" lg=\"7\">\r\n    <Card title=\"Net Institutional Holdings\">\r\n    <CardHeader>\r\n                <CardTitle>Net Institutional Holdings</CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n      <DataTable  data= {this.props.net_inst_value}\r\n      columns={net_inst_columns} scroll={{ x: 100 }} noHeader\r\n /></CardBody></Card>\r\n    </Col>\r\n    <Col sm=\"12\" lg=\"5\">\r\n    <AreaCharts1 themeColors={themeColors} data={this.props.net_inst_by_date} title=\"Net Institutional Share Holdings by Date\" />\r\n    </Col>\r\n    <Divider />\r\n    <Col sm=\"20\" lg=\"10\">\r\n    <Card>\r\n            <CardHeader>\r\n                <CardTitle>Top 10 Institutional Holdings</CardTitle>\r\n              </CardHeader>\r\n      <CardBody>\r\n      <DataTable  data= {this.props.top10_inst}\r\n      columns={inst_columns} scroll={{ x: 1500 }} noHeader\r\n /></CardBody></Card>\r\n </Col>\r\n        </Row>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Report;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport Report from \"./Report\";\nimport { Redirect } from \"react-router-dom\";\nimport GoalOverview from \"../../ui-elements/data-list/Percent\"\nimport ApexAreaCharts from \"./ApexAreaCharts\"\nimport AreaCharts from \"./AreaCharts\"\nimport AreaCharts1 from \"./AreaCharts1\"\nimport DataTable from \"react-data-table-component\"\nimport { Table, Divider, Statistic, Progress } from 'antd';\nimport { ChevronDown } from \"react-feather\";\nimport Chart from \"./lightweight\";\nimport {\n  Card,\n  Container,\n  Col,\n  Row,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  CardImg,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  Spinner,\n  Modal,\n  Button,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n} from \"reactstrap\";\n\nconst columns = [\n  {\n    name: 'Filing Date',\n    selector: 'filingdate',\n    render: (text) => <a>{text}</a>,\n    grow:3\n  },\n  {\n    name: 'Officer Title',\n    selector: 'officertitle',\n    grow:5\n\n  },\n  {\n    name: 'Security Title',\n    selector: 'securitytitle',\n    grow:5\n\n  },\n  {\n    name: 'Exercise Price',\n    selector: 'priceexercisable',\n\n  },\n  {\n    name: 'Expiration Date',\n    selector: 'expirationdate',\n\n  },\n\n  {\n    name: 'Transaction Price ',\n    selector: 'transactionpricepershare',\n    sortable: true\n  },\n  {\n    name: 'Transaction Value ($ Mn)',\n    selector: 'transactionvalue',\n    sortable: true\n  }\n];\n\nconst inst_columns= [\n  {\n    name: 'Calendar Date',\n    selector: 'calendardate',\n    render: (text) => <a>{text}</a>,\n    grow:3\n  },\n  {\n    name: 'Investor Name',\n    selector: 'investorname',\n    grow:5\n\n  },\n  {\n    name: 'Security Type',\n    selector: 'securitytype',\n    grow:3\n\n  },\n  {\n    name: 'Price ',\n    selector: 'price',\n    sortable: true\n  },\n    {\n      name: 'Net Value ($ Mn)',\n      selector: 'value',\n      sortable: true\n    }\n  ]\n\n  const net_inst_columns =[\n    {\n      name: 'Calendar Date',\n      selector: 'calendardate',\n      render: (text) => <a>{text}</a>,\n    },\n    {\n      name: 'Security Type',\n      selector: 'securitytype',\n      grow:3\n\n    },\n      {\n        name: 'Net Value ($ Mn)',\n        selector: 'value',\n        sortable: true\n      }\n    ]\n/*\n\n  const sell_config = {\n    data: props.sell_value,\n    height: 400,\n    xField: 'filingdate',\n    yField: 'transactionvalue',\n    point: {\n    size: 3,\n    shape: 'circle',\n    },\n  };\n  <Card title=\"Insider Buy\">\n    <Area  data: props.buy_value\n    height: 400\n    xField: 'filingdate'\n    yField: 'transactionvalue'\n    point: {\n    size: 3,\n    shape: 'circle',\n    } />\n    </Card>\n    <Divider></Divider>\n    <Card title=\"Insider Sell\">\n    <Area  {...sell_config} />\n    </Card>\n  */\nlet $primary = \"#7367F0\",\n  $success = \"#28C76F\",\n  $danger = \"#EA5455\",\n  $warning = \"#FF9F43\",\n  $info = \"#00cfe8\",\n  $label_color_light = \"#dae1e7\"\n\nlet themeColors = [$primary, $success, $danger, $warning, $info]\n\nclass ApexCharts extends React.Component {\n  state = {\n    options: {\n      alignLabels: true,\n      timeScale: {\n        rightOffset: 12,\n        barSpacing: 3,\n        fixLeftEdge: true,\n        lockVisibleTimeRangeOnResize: true,\n        rightBarStaysOnScroll: true,\n        borderVisible: false,\n        borderColor: \"#fff000\",\n        visible: true,\n        timeVisible: true,\n        secondsVisible: false\n      }\n    },\n    articles: [],\n    docs: [],\n    buy_value: [],\n    sell_value: [],\n    top10_buys: [],\n    top10_sells: [],\n    net_inst_by_date: [],\n    top10_inst: [],\n    net_inst_value: [],\n    wealth_graph: [],\n    isPostLoading: true,\n    loading: true\n  }\n  getShares = (net_inst_by_date) => {\n    let net_inst_by_date_shr = []\n      for (let i=0;i<net_inst_by_date.length;i++){\n          if(net_inst_by_date[i].securitytype===\"SHR\"){\n          net_inst_by_date_shr.push(net_inst_by_date[i]);\n        }\n\n      }\n      return net_inst_by_date_shr\n\n  }\n\n   renameKey = ( obj, oldKey, newKey ) =>{\n    obj[newKey] = obj[oldKey];\n    delete obj[oldKey];\n  }\n\n  fetchArticles = () => {\n    const articleID = this.props.match.params.articleID;\n    axios.get(`https://openstreet.io/api/matrix/${articleID}/`)\n      .then(res => {\n        let arr = JSON.stringify(res.data.wealth_graph);\n        arr = arr.split('\"date\":').join('\"time\":').split('\"performance\":').join('\"value\":')\n        let updatedJson = JSON.parse( arr );\n        console.log(updatedJson);\n\n\n        this.setState({\n          articles: res.data,\n          wealth_graph: (res.data.wealth_graph),\n          buy_value: (res.data.buy_value),\n          sell_value: (res.data.sell_value),\n          top10_buys: (res.data.top10_buys),\n          top10_sells: (res.data.top10_sells),\n          net_inst_by_date: this.getShares(res.data.net_inst_by_date),\n          top10_inst: (res.data.top10_inst),\n          net_inst_value: (res.data.net_inst_value),\n          loading:false,\n          areaSeries: [{data:updatedJson}]\n        });\n        \n      });\n      \n  }\n  toggleModal = () => {\n    this.setState(prevState => ({\n      loading: !prevState.loading\n    }));\n  }\n\n  componentDidMount() {\n    //this.setState({loading: true});\n    this.fetchArticles();\n  }\n\n  //componentDidUpdate(){\n  //  if (this.state.buy_value.length !== 0 & this.state.loading === true) {\n  //    this.setState({loading: false})\n  //  }\n  //}\n  //<ApexAreaCharts themeColors={themeColors} data={this.state.wealth_graph} second=\"1\" title=\"Wealth Graph\" />\n//<AreaCharts themeColors={themeColors} data={this.state.buy_value} columns={'calendardate','value'} title=\"Insider Buy\" />\n  render() {\n    if (!this.props.token) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.docs.length === 0 & this.state.isPostLoading === false) {\n      this.setState({isPostLoading: true});\n    }\n    if (this.state.docs.length !== 0 & this.state.isPostLoading === true) {\n      this.setState({isPostLoading: false})\n    }\n\n\n    return (\n    <React.Fragment>\n      { \n        this.state.loading ?\n        <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '20vh'}}>\n           \n        <span><Spinner color=\"primary\" size=\"sm\"/> Loading Stock Research Report </span>\n        </div>\n        :\n        <div className=\"site-card-wrapper\">\n        \n        <Row>\n          <Col lg=\"4\" sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {this.state.articles.ticker_name}\n                </CardTitle>\n              </CardHeader><hr />\n              <CardBody>\n                <Statistic value={this.state.articles.price} />\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Divider />\n       \n        <Chart legend=\"Wealth Graph\" options={this.state.options} darkTheme={true} areaSeries={this.state.areaSeries} autoWidth height={320} />\n       \n        <Divider></Divider>\n        <Row gutter={16}>\n          <Col lg=\"4\" sm=\"12\">\n            <Card>\n              <CardBody>\n                <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Health\" percent={this.state.articles.company_health} />\n                <Divider />\n                <Row gutter={20}>\n                  <Col span={12}>\n                    <p>5 Yr Revenue Growth (%)</p>\n                    <Statistic value={this.state.articles.rev_growth} />\n                  </Col>\n\n                  <Col span={12}>\n                    <p>Revenue Growth Uncertainty (%)</p>\n                    <Statistic value={this.state.articles.rev_uncertainty} />\n                  </Col>\n                  <Divider />\n                  <Col span={12}>\n                    <p>5 Yr Average Profit Margin (%)</p>\n                    <Statistic value={this.state.articles.profit_margin} />\n                  </Col>\n                  <Col span={12}>\n                    <p>5 Yr Average Market Share Growth (%)</p>\n                    <Statistic value={this.state.articles.market_share_growth} />\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg=\"4\" sm=\"12\">\n            <Card><CardBody>\n            <GoalOverview  strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Yield\" percent={this.state.articles.company_yield} />\n              <Divider />\n              <Row gutter={20}>\n                <Col span={12}>\n                  <p>5 Yr Average Dividend Yield (%)</p>\n                  <Statistic value={this.state.articles.dividend_yield} />\n                </Col>\n\n                <Col span={12}>\n                  <p>5 Yr Average Earnings Yield (%)</p>\n                  <Statistic value={this.state.articles.earnings_yield} />\n                </Col>\n                <Divider />\n                <Col span={12}>\n                  <p>5 Yr Average Payout Ratio (%)</p>\n                  <Statistic value={this.state.articles.payout_ratio} />\n                </Col>\n                <Col span={12}>\n                  <p>5 Yr Average Free Cash Flow ($bn)</p>\n                  <Statistic value={this.state.articles.free_cash_flow} />\n                </Col>\n              </Row>\n              </CardBody></Card>\n          </Col>\n          <Col lg=\"4\" sm=\"12\">\n            <Card><CardBody>\n            <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" title=\"Company Quality\" percent={this.state.articles.company_quality} />\n            <Divider />\n            <Row gutter={20}>\n              <Col span={12}>\n                <p>5 Yr Average Debt/Equity</p>\n                <Statistic value={this.state.articles.debt_to_equity} />\n              </Col>\n\n              <Col span={12}>\n                <p>5 Yr Average Return on Invested Capital (%)</p>\n                <Statistic  value={this.state.articles.return_on_invested_capital} />\n              </Col>\n              <Divider />\n              <Col span={12}>\n                <p>5 Yr Average Growth in ROE (%)</p>\n                <Statistic  value={this.state.articles.roe_growth} />\n              </Col>\n              <Col span={12}>\n                <p>ROE Growth Uncertainty (%)</p>\n                <Statistic value={this.state.articles.roe_uncertainty} />\n              </Col>\n            </Row>\n            </CardBody></Card>\n          </Col>\n        </Row>\n        <Divider></Divider>\n        <Row gutter={16}>\n          <Col lg=\"4\" sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  Fair Value\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <p>Fair Value Rating ( / 20)</p>\n              <Statistic value={this.state.articles.fair_value_score} />\n              <Divider></Divider>\n              <Row gutter={20}>\n                <Col span={12}>\n                  <p>Fair Value by Dividend Discount Model ($)</p>\n                  <Statistic value={this.state.articles.fair_value_ddm} />\n                </Col>\n\n                <Col span={12}>\n                  <p>Fair Value by Free Cash Flow Model ($)</p>\n                  <Statistic value={this.state.articles.fair_value_fcf} />\n                </Col>\n              </Row>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg=\"4\" sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  Industry Rank: {this.state.articles.industry}\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n              <Statistic value={this.state.articles.industry_rank} />\n              <Divider />\n              <Row gutter={20}>\n                <Col span={12}>\n                  <p>Profitability Rank</p>\n                  <Statistic  value={this.state.articles.profitability_rank} />\n                </Col>\n\n                <Col span={12}>\n                  <p>Value Rank</p>\n                  <Statistic value={this.state.articles.value_rank} />\n                </Col>\n                <Divider />\n                <Col span={24}>\n                  <p>Quality Rank</p>\n                  <Statistic value={this.state.articles.quality_rank} />\n                </Col>\n              </Row>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg=\"4\" sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Market Risk</CardTitle>\n              </CardHeader>\n              <CardBody>\n                <p>Risk Rating ( / 30)</p>\n              <Statistic value={this.state.articles.risk_score} />\n              <Divider />\n              <Row gutter={20}>\n                <Col span={12}>\n                  <p>Annualized Volatility (%)</p>\n                  <Statistic value={this.state.articles.vol} />\n                </Col>\n                <Col span={12}>\n                  <p>Max Drawdown (%)</p>\n                  <Statistic value={this.state.articles.max_drawdown} />\n                </Col>\n                <Divider />\n                <Col span={24}>\n                  <p>Correlation with Market</p>\n                  <Statistic value={this.state.articles.correl} />\n                </Col>\n              </Row>\n              </CardBody>\n            </Card>\n          </Col>\n\n          <Divider />\n          <Col sm=\"5\" lg=\"3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Insider Rating</CardTitle>\n              </CardHeader>\n              <CardBody>\n              <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" percent={this.state.articles.net_value_executed_pct} />\n              </CardBody>\n            </Card>\n          </Col>\n          <Divider></Divider>\n          <Col sm=\"12\" lg=\"5\">\n          <AreaCharts themeColors={themeColors} data={this.state.buy_value} columns={'calendardate','value'} title=\"Insider Buy\" />\n\n          \n          </Col>\n\n          <Col sm=\"12\" lg=\"7\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  Top 10 Insider Trades Buy\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n              <DataTable data={this.state.top10_buys}\n                columns={columns} scroll={{ x: 1500 }} noHeader\n              /></CardBody>\n              </Card>\n          </Col>\n\n          <Divider />\n          <Col sm=\"12\" lg=\"5\">\n            <AreaCharts themeColors={themeColors} data={this.state.sell_value} title=\"Insider Sell\" />\n          </Col>\n\n          <Col sm=\"12\" lg=\"7\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Top 10 Insider Trades Sell</CardTitle>\n              </CardHeader>\n              <CardBody>\n              <DataTable data={this.state.top10_sells}\n                columns={columns} scroll={{ x: 1500 }} noHeader\n              />\n              </CardBody>\n              </Card>\n          </Col>\n          <Divider></Divider>\n            <Col sm=\"5\" lg=\"3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Institutional Rating</CardTitle>\n              </CardHeader>\n              <CardBody>\n              <GoalOverview strokeColor=\"#b9c3cd\" success=\"#28C76F\" percent={this.state.articles.net_holding_pct} />\n              </CardBody>\n            </Card>\n          </Col>\n\n\n      <Divider />\n      <Col sm=\"12\" lg=\"7\">\n    <Card title=\"Net Institutional Holdings\">\n    <CardHeader>\n                <CardTitle>Net Institutional Holdings</CardTitle>\n              </CardHeader>\n              <CardBody>\n      <DataTable  data= {this.state.net_inst_value}\n      columns={net_inst_columns} scroll={{ x: 100 }} noHeader\n /></CardBody></Card>\n    </Col>\n    <Col sm=\"12\" lg=\"5\">\n    <AreaCharts1 themeColors={themeColors} data={this.state.net_inst_by_date} title=\"Net Institutional Share Holdings by Date\" />\n    </Col>\n    <Divider />\n    <Col sm=\"20\" lg=\"10\">\n    <Card>\n            <CardHeader>\n                <CardTitle>Top 10 Institutional Holdings</CardTitle>\n              </CardHeader>\n      <CardBody>\n      <DataTable  data= {this.state.top10_inst}\n      columns={inst_columns} scroll={{ x: 1500 }} noHeader\n /></CardBody></Card>\n </Col>\n        </Row>\n\n      </div>\n      \n        }\n      \n        \n        \n        \n    </React.Fragment>\n    );\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token\n  }\n}\n\n\nexport default connect(mapStatetoProps)(ApexCharts);\n","import React from \"react\"\r\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\r\nimport Chart from \"react-apexcharts\"\r\n\r\nclass GoalOverview extends React.Component {\r\n  state = {\r\n    options: {\r\n      chart: {\r\n        sparkline: {\r\n          enabled: true\r\n        },\r\n        dropShadow: {\r\n          enabled: true,\r\n          blur: 3,\r\n          left: 1,\r\n          top: 1,\r\n          opacity: 0.1\r\n        }\r\n      },\r\n      colors: [this.props.success],\r\n      plotOptions: {\r\n        radialBar: {\r\n          size: 110,\r\n          startAngle: -140,\r\n          endAngle: 150,\r\n          hollow: {\r\n            size: \"77%\"\r\n          },\r\n          track: {\r\n            background: this.props.strokeColor,\r\n            strokeWidth: \"50%\"\r\n          },\r\n          dataLabels: {\r\n            name: {\r\n              show: false\r\n            },\r\n            value: {\r\n              offsetY: 18,\r\n              color: this.props.strokeColor,\r\n              fontSize: \"4rem\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shade: \"dark\",\r\n          type: \"horizontal\",\r\n          shadeIntensity: 0.5,\r\n          gradientToColors: [\"#00b5b5\"],\r\n          inverseColors: true,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          stops: [0, 100]\r\n        }\r\n      },\r\n      stroke: {\r\n        lineCap: \"round\"\r\n      }\r\n    },\r\n    series: [this.props.percent]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{this.props.title}</CardTitle>\r\n        </CardHeader><hr/>\r\n        <CardBody>\r\n          <Chart\r\n            options={this.state.options}\r\n            series={[this.props.percent]}\r\n            type=\"radialBar\"\r\n            height={200}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default GoalOverview\r\n","import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\nimport Chart from \"react-apexcharts\"\n\nclass ApexAreaCharts extends React.Component {\n  modifydata = (data, flag, second) => {\n    let date = [], wealth = [];\n    for (let x in data) {\n      date.push(data[x].date);\n      if (second == 0) wealth.push(Math.round(data[x].portfolio_wealth * 100) / 100);\n      else wealth.push(Math.round(data[x].performance * 100) / 100);\n    }\n    if (!flag) return date;\n    else return wealth;\n  }\n\n  render() {\n    const options = {\n      chart: {\n        id: \"areaChart\"\n      },\n      xaxis: {\n        type: \"date\",\n        categories: this.modifydata(this.props.data, 0, this.props.second),\n        tickAmount: 8\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      dataLabels: {\n        enabled: false\n      },\n      colors: this.props.themeColors,\n      grid: {\n        row: {\n          colors: [\"#f3f3f3\", \"transparent\"],\n          opacity: 0.5\n        }\n      },\n      legend: {\n        offsetY: -10\n      },\n      tooltip: {\n        x: {\n          format: \"dd/MM/yy\"\n        }\n      }\n    };\n    const series = [\n      {\n        name: \"series1\",\n        data: this.modifydata(this.props.data, 1, this.props.second)\n      }\n    ];\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>{this.props.title}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Chart\n            options={options}\n            series={series}\n            type=\"area\"\n            height={500}\n          />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default ApexAreaCharts\n","import React from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport equal from \"fast-deep-equal\";\n\nconst addSeriesFunctions = {\n    candlestick: \"addCandlestickSeries\",\n    line: \"addLineSeries\",\n    area: \"addAreaSeries\",\n    bar: \"addBarSeries\",\n    histogram: \"addHistogramSeries\",\n};\n\nconst colors = [\n    \"#008FFB\",\n    \"#00E396\",\n    \"#FEB019\",\n    \"#FF4560\",\n    \"#775DD0\",\n    \"#F86624\",\n    \"#A5978B\",\n];\n\nconst darkTheme = {\n    layout: {\n        backgroundColor: \"#0e163b\",\n        lineColor: \"#2B2B43\",\n        textColor: \"#D9D9D9\",\n    },\n    grid: {\n        vertLines: {\n            color: \"#363c4e\",\n        },\n        horzLines: {\n            color: \"#363c4e\",\n        },\n    },\n};\n\nconst lightTheme = {\n    layout: {\n        backgroundColor: \"#FFFFFF\",\n        lineColor: \"#2B2B43\",\n        textColor: \"#191919\",\n    },\n    grid: {\n        vertLines: {\n            color: \"#e1ecf2\",\n        },\n        horzLines: {\n            color: \"#e1ecf2\",\n        },\n    },\n};\n\nclass ChartWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartDiv = React.createRef();\n        this.legendDiv = React.createRef();\n        this.chart = null;\n        this.series = [];\n        this.legends = [];\n    }\n\n    componentDidMount() {\n        this.chart = createChart(this.chartDiv.current);\n        this.handleUpdateChart();\n        this.resizeHandler();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.props.autoWidth && !this.props.autoHeight)\n            window.removeEventListener(\"resize\", this.resizeHandler);\n        if (\n            !equal(\n                [\n                    prevProps.onCrosshairMove,\n                    prevProps.onTimeRangeMove,\n                    prevProps.onClick,\n                ],\n                [\n                    this.props.onCrosshairMove,\n                    this.props.onTimeRangeMove,\n                    this.props.onClick,\n                ]\n            )\n        )\n            this.unsubscribeEvents(prevProps);\n        if (\n            !equal(\n                [\n                    prevProps.options,\n                    prevProps.darkTheme,\n                    prevProps.candlestickSeries,\n                    prevProps.lineSeries,\n                    prevProps.areaSeries,\n                    prevProps.barSeries,\n                    prevProps.histogramSeries,\n                ],\n                [\n                    this.props.options,\n                    this.props.darkTheme,\n                    this.props.candlestickSeries,\n                    this.props.lineSeries,\n                    this.props.areaSeries,\n                    this.props.barSeries,\n                    this.props.histogramSeries,\n                ]\n            )\n        ) {\n            this.removeSeries();\n            this.handleUpdateChart();\n        } else if (\n            prevProps.from !== this.props.from ||\n            prevProps.to !== this.props.to\n        )\n            this.handleTimeRange();\n    }\n\n    resizeHandler = () => {\n        let width =\n            this.props.autoWidth &&\n            this.chartDiv.current &&\n            this.chartDiv.current.parentNode.clientWidth;\n        let height =\n            this.props.autoHeight && this.chartDiv.current\n                ? this.chartDiv.current.parentNode.clientHeight\n                : this.props.height || 500;\n        this.chart.resize(width, height);\n    };\n\n    removeSeries = () => {\n        this.series.forEach((serie) => this.chart.removeSeries(serie));\n        this.series = [];\n    };\n\n    addSeries = (serie, type) => {\n        const func = addSeriesFunctions[type];\n        let color =\n            (serie.options && serie.options.color) ||\n            colors[this.series.length % colors.length];\n        const series = this.chart[func]({\n            color,\n            ...serie.options,\n        });\n        let data = this.handleLinearInterpolation(\n            serie.data,\n            serie.linearInterpolation\n        );\n        series.setData(data);\n        if (serie.markers) series.setMarkers(serie.markers);\n        if (serie.priceLines)\n            serie.priceLines.forEach((line) => series.createPriceLine(line));\n        if (serie.legend) this.addLegend(series, color, serie.legend);\n        return series;\n    };\n\n    handleSeries = () => {\n        let series = this.series;\n        let props = this.props;\n        props.candlestickSeries &&\n            props.candlestickSeries.forEach((serie) => {\n                series.push(this.addSeries(serie, \"candlestick\"));\n            });\n\n        props.lineSeries &&\n            props.lineSeries.forEach((serie) => {\n                series.push(this.addSeries(serie, \"line\"));\n            });\n\n        props.areaSeries &&\n            props.areaSeries.forEach((serie) => {\n                series.push(this.addSeries(serie, \"area\"));\n            });\n\n        props.barSeries &&\n            props.barSeries.forEach((serie) => {\n                series.push(this.addSeries(serie, \"bar\"));\n            });\n\n        props.histogramSeries &&\n            props.histogramSeries.forEach((serie) => {\n                series.push(this.addSeries(serie, \"histogram\"));\n            });\n    };\n\n    unsubscribeEvents = (prevProps) => {\n        let chart = this.chart;\n        chart.unsubscribeClick(prevProps.onClick);\n        chart.unsubscribeCrosshairMove(prevProps.onCrosshairMove);\n        chart.timeScale().unsubscribeVisibleTimeRangeChange(prevProps.onTimeRangeMove);\n    };\n\n    handleEvents = () => {\n        let chart = this.chart;\n        let props = this.props;\n        props.onClick && chart.subscribeClick(props.onClick);\n        props.onCrosshairMove &&\n            chart.subscribeCrosshairMove(props.onCrosshairMove);\n        props.onTimeRangeMove &&\n            chart.timeScale().subscribeVisibleTimeRangeChange(props.onTimeRangeMove);\n\n        // handle legend dynamical change\n        chart.subscribeCrosshairMove(this.handleLegends);\n    };\n\n    handleTimeRange = () => {\n        let { from, to } = this.props;\n        from && to && this.chart.timeScale().setVisibleRange({ from, to });\n    };\n\n    handleLinearInterpolation = (data, candleTime) => {\n        if (!candleTime || data.length < 2 || !data[0].value) return data;\n        let first = data[0].time;\n        let last = data[data.length - 1].time;\n        let newData = new Array(Math.floor((last - first) / candleTime));\n        newData[0] = data[0];\n        let index = 1;\n        for (let i = 1; i < data.length; i++) {\n            newData[index++] = data[i];\n            let prevTime = data[i - 1].time;\n            let prevValue = data[i - 1].value;\n            let { time, value } = data[i];\n            for (\n                let interTime = prevTime;\n                interTime < time - candleTime;\n                interTime += candleTime\n            ) {\n                // interValue get from the Taylor-Young formula\n                let interValue =\n                    prevValue +\n                    (interTime - prevTime) *\n                        ((value - prevValue) / (time - prevTime));\n                newData[index++] = { time: interTime, value: interValue };\n            }\n        }\n        // return only the valid values\n        return newData.filter((x) => x);\n    };\n\n    handleUpdateChart = () => {\n        window.removeEventListener(\"resize\", this.resizeHandler);\n        let { chart, chartDiv } = this;\n        let props = this.props;\n        let options = this.props.darkTheme ? darkTheme : lightTheme;\n        options = mergeDeep(options, {\n            width: props.autoWidth\n                ? chartDiv.current.parentNode.clientWidth\n                : props.width,\n            height: props.autoHeight\n                ? chartDiv.current.parentNode.clientHeight\n                : props.height || 500,\n            ...props.options,\n        });\n        chart.applyOptions(options);\n        if (this.legendDiv.current) this.legendDiv.current.innerHTML = \"\";\n        this.legends = [];\n        if (this.props.legend) this.handleMainLegend();\n\n        this.handleSeries();\n        this.handleEvents();\n        this.handleTimeRange();\n\n        if (props.autoWidth || props.autoHeight)\n            // resize the chart with the window\n            window.addEventListener(\"resize\", this.resizeHandler);\n    };\n\n    addLegend = (series, color, title) => {\n        this.legends.push({ series, color, title });\n    };\n\n    handleLegends = (param) => {\n        let div = this.legendDiv.current;\n        if (param.time && div && this.legends.length) {\n            div.innerHTML = \"\";\n            this.legends.forEach(({ series, color, title }) => {\n                let price = param.seriesPrices.get(series);\n                if (price !== undefined) {\n                    if (typeof price == \"object\") {\n                        color =\n                            price.open < price.close\n                                ? \"rgba(0, 150, 136, 0.8)\"\n                                : \"rgba(255,82,82, 0.8)\";\n                        price = `O: ${price.open}, H: ${price.high}, L: ${price.low}, C: ${price.close}`;\n                    }\n                    let row = document.createElement(\"div\");\n                    row.innerText = title + \" \";\n                    let priceElem = document.createElement(\"span\");\n                    priceElem.style.color = color;\n                    priceElem.innerText = \" \" + price;\n                    row.appendChild(priceElem);\n                    div.appendChild(row);\n                }\n            });\n        }\n    };\n\n    handleMainLegend = () => {\n        if (this.legendDiv.current) {\n            let row = document.createElement(\"div\");\n            row.innerText = this.props.legend;\n            this.legendDiv.current.appendChild(row);\n        }\n    };\n\n    render() {\n        let color = this.props.darkTheme\n            ? darkTheme.layout.textColor\n            : lightTheme.layout.textColor;\n\n        return (\n            <div ref={this.chartDiv} style={{ position: \"relative\" }}>\n                <div\n                    ref={this.legendDiv}\n                    style={{\n                        position: \"absolute\",\n                        zIndex: 2,\n                        color,\n                        padding: 10,\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ChartWrapper;\nexport * from \"lightweight-charts\";\n\nconst isObject = (item) =>\n    item && typeof item === \"object\" && !Array.isArray(item);\n\nconst mergeDeep = (target, source) => {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isObject(source[key])) {\n                if (!(key in target))\n                    Object.assign(output, { [key]: source[key] });\n                else output[key] = mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n};\n"],"sourceRoot":""}